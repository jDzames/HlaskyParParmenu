package s.ics.upjs.sk.jdzama.hlaskyparparmenu.provider;

//db podla http://ics.upjs.sk/~novotnyr/blog/2050/systemove-programovanie-2015-poziadavky-na-hodnotenie

import android.content.ContentProvider;
import android.content.ContentResolver;
import android.content.ContentUris;
import android.content.ContentValues;
import android.content.UriMatcher;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.net.Uri;

import s.ics.upjs.sk.jdzama.hlaskyparparmenu.database.DatabaseOpenHelper;
import s.ics.upjs.sk.jdzama.hlaskyparparmenu.util.Defaults;

import static android.content.ContentResolver.SCHEME_CONTENT;
import static s.ics.upjs.sk.jdzama.hlaskyparparmenu.provider.Provider.Oblubene;

public class OblubeneContentProvider extends ContentProvider {

    public static final String AUTHORITY = "s.ics.upjs.sk.jdzama.hlaskyparparmenu.provider.OblubeneContentProvider";
    public static final Uri CONTENT_URI = new Uri.Builder()
            .scheme(SCHEME_CONTENT)
            .authority(AUTHORITY)
            .appendPath(Oblubene.TABLE_NAME)
            .build();


    private static final String MIME_TYPE_OBLUBENE = ContentResolver.CURSOR_DIR_BASE_TYPE + "/vnd." + AUTHORITY + "." + Oblubene.TABLE_NAME;
    private static final String MIME_TYPE_SINGLE_OBLUBENA = ContentResolver.CURSOR_ITEM_BASE_TYPE + "/vnd." + AUTHORITY + "." + Oblubene.TABLE_NAME;

    private DatabaseOpenHelper databaseHelper;

    private UriMatcher uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);
    private static final int URI_MATCH_OBLUBENE = 0;
    private static final int URI_MATCH_OBLUBENE_BY_ID = 1;

    public OblubeneContentProvider() {
    }

    @Override
    public boolean onCreate() {
        this.databaseHelper = new DatabaseOpenHelper(getContext());
        uriMatcher.addURI(AUTHORITY, Oblubene.TABLE_NAME, URI_MATCH_OBLUBENE);
        uriMatcher.addURI(AUTHORITY, Oblubene.TABLE_NAME + "/#", URI_MATCH_OBLUBENE_BY_ID);
        return false;
    }

    @Override
    public Cursor query(Uri uri, String[] projection, String selection,
                        String[] selectionArgs, String sortOrder) {
        Cursor cursor = null;
        switch(uriMatcher.match(uri)) {
            case URI_MATCH_OBLUBENE:
                cursor = listOblubene();
                cursor.setNotificationUri(getContext().getContentResolver(), uri);
                return cursor;
            case URI_MATCH_OBLUBENE_BY_ID:
                long id = ContentUris.parseId(uri);
                cursor = findById(id);
                return cursor;
            default:
                return Defaults.NO_CURSOR;
        }
    }

    private Cursor listOblubene() {
        SQLiteDatabase db = databaseHelper.getReadableDatabase();
        return db.query(Oblubene.TABLE_NAME, Defaults.ALL_COLUMNS,
                Defaults.NO_SELECTION, Defaults.NO_SELECTION_ARGS, Defaults.NO_GROUP_BY,
                Defaults.NO_HAVING, Defaults.NO_SORT_ORDER);
    }

    private Cursor findById(long id) {
        SQLiteDatabase db = databaseHelper.getReadableDatabase();
        String selection = Oblubene._ID + "=" + id;
        return db.query(Oblubene.TABLE_NAME, Defaults.ALL_COLUMNS, selection,
                Defaults.NO_SELECTION_ARGS, Defaults.NO_GROUP_BY,
                Defaults.NO_HAVING, Defaults.NO_SORT_ORDER);
    }

    @Override
    public Uri insert(Uri uri, ContentValues values) {
        switch(uriMatcher.match(uri)) {
            case URI_MATCH_OBLUBENE:
                Uri newItemUri =  saveOblubene(values);
                getContext().getContentResolver().notifyChange(uri, Defaults.NO_CONTENT_OBSERVER);
                return newItemUri;
            default:
                return Defaults.NO_URI;
        }
    }

    private Uri saveOblubene(ContentValues values) {
        ContentValues oblubene = new ContentValues();
        oblubene.put(Oblubene._ID, Defaults.AUTOGENERATED_ID);
        oblubene.put(Oblubene.RAW_ID, values.getAsInteger(Oblubene.RAW_ID));
        oblubene.put(Oblubene.NAZOV, values.getAsString(Oblubene.NAZOV));
        oblubene.put(Oblubene.AUTOR, values.getAsString(Oblubene.AUTOR));

        SQLiteDatabase db = databaseHelper.getWritableDatabase();
        long newId = db.insert(Oblubene.TABLE_NAME, Defaults.NO_NULL_COLUMN_HACK, oblubene);
        return ContentUris.withAppendedId(CONTENT_URI, newId);
    }

    @Override
    public int update(Uri uri, ContentValues values, String selection,
                      String[] selectionArgs) {
        // nepouzivame
        return 0;
    }

    @Override
    public int delete(Uri uri, String selection, String[] selectionArgs) {
        switch(uriMatcher.match(uri)) {
            case URI_MATCH_OBLUBENE_BY_ID:
                long id = ContentUris.parseId(uri);
                int affectedRows = databaseHelper.getWritableDatabase()
                        .delete(Oblubene.TABLE_NAME, Oblubene._ID + " = " + id, Defaults.NO_SELECTION_ARGS);
                getContext().getContentResolver().notifyChange(CONTENT_URI, Defaults.NO_CONTENT_OBSERVER);
                return affectedRows;
            case URI_MATCH_OBLUBENE:
                int allAffectedRows = databaseHelper.getWritableDatabase()
                        .delete(Oblubene.TABLE_NAME, Defaults.ALL_ROWS, Defaults.NO_SELECTION_ARGS);
                getContext().getContentResolver().notifyChange(CONTENT_URI, Defaults.NO_CONTENT_OBSERVER);
                return allAffectedRows;
            default:
                return 0;
        }
    }

    @Override
    public String getType(Uri uri) {
        switch(uriMatcher.match(uri)) {
            case URI_MATCH_OBLUBENE_BY_ID:
                return MIME_TYPE_SINGLE_OBLUBENA;
            case URI_MATCH_OBLUBENE:
                return MIME_TYPE_OBLUBENE;
        }
        return Defaults.NO_TYPE;
    }
}
